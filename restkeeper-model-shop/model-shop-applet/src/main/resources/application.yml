#服务配置
server:
  #端口
  port: 7079
  #服务编码
  tomcat:
    uri-encoding: UTF-8
#spring相关配置
spring:
  main:
    allow-bean-definition-overriding: true
  redis:
    redisson:
      config: classpath:singleServerConfig.yaml
  #数据源配置
  shardingsphere:
    datasource:
      names: ds0,ds1
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.112.77:3306/restkeeper-shop-0?useAffectedRows=true&serverTimezone=UTC
        username: root
        password: pass
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.112.77:3306/restkeeper-shop-1?useAffectedRows=true&serverTimezone=UTC
        username: root
        password: pass
    #分库分表
    sharding:
      tables:
        tab_order: #数据库中要分表的逻辑名
          actualDataNodes: ds${0..1}.tab_order_${0..1}
          databaseStrategy:
            inline:
              shardingColumn: sharding_id
              algorithmExpression: ds${sharding_id % 2}
          tableStrategy:
            inline:
              shardingColumn: order_no
              algorithmExpression: tab_order_${order_no % 2}
          keyGenerator:
            type: SNOWFLAKE
            column: id
        tab_order_item: #数据库中要分表的逻辑名
          actualDataNodes: ds${0..1}.tab_order_item_${0..1}
          databaseStrategy:
            inline:
              shardingColumn: sharding_id
              algorithmExpression: ds${sharding_id % 2}
          tableStrategy:
            inline:
              shardingColumn: product_order_no
              algorithmExpression: tab_order_item_${product_order_no % 2}
          keyGenerator:
            type: SNOWFLAKE
            column: id
      binding-tables:
        - tab_order
        - tab_order_item
      broadcast-tables:
        - tab_brand
        - tab_category
        - tab_dish
        - tab_dish_flavor
        - tab_printer
        - tab_printer_dish
        - tab_store
        - tab_table
        - tab_table_area
        - undo_log
      default-key-generator:
        type: SNOWFLAKE
        column: id
    props:
      sql.show: true
#mybatis配置
mybatis-plus:
  # MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名
  type-aliases-package: com.itheima.springcloud.pojo
  # 该配置请和 typeAliasesPackage 一起使用，如果配置了该属性，则仅仅会扫描路径下以该类作为父类的域对象 。
  type-aliases-super-type: com.itheima.restkeeper.basic.BasicPojo
  configuration:
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 驼峰下划线转换
    map-underscore-to-camel-case: true
    use-generated-keys: true
    default-statement-timeout: 60
    default-fetch-size: 100
  #忽略商户号表
  ignore-enterprise-tables:
    - tab_brand
    - tab_category
    - tab_dish
    - tab_dish_flavor
    - tab_order
    - tab_order_item
    - tab_printer
    - tab_printer_dish
    - tab_store
    - tab_table
    - tab_table_area
    - tab_role
    - tab_order_role
    - undo_log
  #忽略门店号表
  ignore-store-tables:
    - tab_brand
    - tab_category
    - tab_dish
    - tab_dish_flavor
    - tab_order
    - tab_order_item
    - tab_printer
    - tab_printer_dish
    - tab_store
    - tab_table
    - tab_table_area
    - tab_role
    - tab_order_role
    - undo_log
logging:
  config: classpath:logback.xml
dubbo:
  application:
    version: 1.0.0
    logger: slf4j
  scan:
    base-packages: com.itheima.restkeeper
  registry:
    address: spring-cloud://192.168.112.77
  protocol:
    #指定二进制协议
    name: dubbo
    port: 27079
    threads: 200
    accesslog: D:/logs/model-shop-applet-01.log
